进程模型

system
fork
exec
所有进程追溯其祖先最终都会落尽进程号为1的进程身上，这个进程叫Init进程
Init进程是linux内核启动后第一个执行的进程 进程号1
Init引导系统，启动守护进程并且运行必要的程序

ps aux 显示系统当前运行的所有进程

system 系统调用
#include <stdlib.h>
int system(const char *string);
返回127 如果出现其他错误返回-1 成功返回0 但如果string为NULL 返回一个非0值

fork系统调用
#include <unistd.h>
pid_t fork(void)
如果返回0 这是子进程   在子进程中返回0
如果返回非0 就是父进程 在父进程中返回PID

fork的过程包括把父进程全部内存映像复制给子进程，这个过程很缓慢
Unix 的设计者创建了vfork调用，vfork调用也创建新进程，但它不产生
父进程的副本
Linux已经使用了写时复制技术，因此linux的fork和unix的vfork一样快

int execve(const char *path,const char *arg,char *const envp[]);
进程执行到execve 就切换到进程execve执行的进程，替换原有进程，PID不会变
路径 参数 NULL
#include <sys/wait.h>
可以收集子进程的退出状态（WEXITSTATUS(status)）获取返回值的内容
pid_t wait(int *status); 不能指定子进程ID号
pid_t waitpid(pid_t pid,int status,int options);可以指定子进程ID
status 保存子进程的退出状态

在/proc/sys/kernel/下存储着操作系统各种记录，如最大容纳的进程数
pid_max

孤儿进程
孤儿进程是一个父进程在调用wait 或者waitpid之前就已经已经退出的子进程，此时
init进程成为子进程的父进程。
init进程为子进程的父进程收集退出状态，从而避免出现僵死进程。